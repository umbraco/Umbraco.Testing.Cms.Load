parameters:
  - name: hostName
    type: string
  - name: umbracoVersion
    type: string
  - name: appServiceName
    type: string
  - name: testName
    type: string
  - name: userAmount
    type: number

steps:
  - ${{ if ne(parameters.hostName, '') }}:
      - task: AzureCLI@2
        name: startAppService${{ parameters.testName }}
        displayName: 'Start App Service for ${{ parameters.testName }}'
        inputs:
          azureSubscription: '$(serviceConnection)'
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: az webapp start -n ${{ parameters.appServiceName }} -g $(azurergname)

      - task: PowerShell@2
        displayName: 'Sleep for Warm-up - ${{ parameters.testName }}'
        inputs:
          targetType: 'inline'
          script: Start-Sleep -Seconds 180

      - script: |
          echo "Test Name: ${{ parameters.testName }}"
          echo "Host Name: ${{ parameters.hostName }}"
          echo "Umbraco Version: ${{ parameters.umbracoVersion }}"
          echo "App Service Name: ${{ parameters.appServiceName }}"
          echo "User Amount: ${{ parameters.userAmount }}"
          echo "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
          echo "Load Test File Location: $(loadTestFileLocation)"
        displayName: 'All values'

      - script: |
          echo "Listing root of working directory:"
          ls -al $(System.DefaultWorkingDirectory)
          echo ""
          echo "Listing contents of /loadtests folder:"
          ls -al $(System.DefaultWorkingDirectory)/loadtests
        displayName: 'Debug: List test script files'

      - script: |
          # Create k6-results directory and make it writable by Docker container
          # 'chmod 777' ensures the container has full read/write access to the directory
          mkdir -p $(System.DefaultWorkingDirectory)/k6-results
          chmod 777 $(System.DefaultWorkingDirectory)/k6-results

          # Run the k6 load test inside Docker with the grafana/k6 image
          # 'chmod 666' gives read/write permission on the results file so the pipeline can access it
          docker run --rm \
            -e HOST_NAME=${{ parameters.hostName }} \
            -e USERS=${{ parameters.userAmount }} \
            -v $(System.DefaultWorkingDirectory)/loadtests:/testScripts \
            -v $(System.DefaultWorkingDirectory)/k6-results:/results \
            grafana/k6 sh -c "\
              k6 run /testScripts/K6LoadTest.js \
              --summary-export=/results/results-${{ parameters.umbracoVersion }}.json && \
              chmod 666 /results/results-${{ parameters.umbracoVersion }}.json"
        displayName: 'Run k6 Load Test with Docker for ${{ parameters.testName }} (version ${{ parameters.umbracoVersion }})'

      - script: npm install -g k6-to-junit
        displayName: 'Install k6-to-junit CLI'

      - script: |
          # Convert k6 JSON results to JUnit XML format for publishing
          k6-to-junit k6-results/results-${{ parameters.umbracoVersion }}.json > k6-results/k6-results-${{ parameters.umbracoVersion }}.xml
        workingDirectory: $(System.DefaultWorkingDirectory)
        displayName: 'Convert k6 Results to JUnit (version ${{ parameters.umbracoVersion }})'

      - task: PublishTestResults@2
        displayName: 'Publish k6 Test Results (version ${{ parameters.umbracoVersion }})'
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'k6-results/k6-results-${{ parameters.umbracoVersion }}.xml'
          failTaskOnFailedTests: true
          testRunTitle: 'k6 Load Test - ${{ parameters.testName }} (version ${{ parameters.umbracoVersion }})'