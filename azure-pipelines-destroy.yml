# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  # Backend Storage Account
  bkServiceConnection : 'terraform-umbraco-load-testing-tstate-azure-connection'
  bkstrgrg: 'andreas-load-test-tstate-rg'
  bkstrgname: 'loadtesttstate'
  bkcontainer: 'tfstate'
  bkstrgkey: 'fhaj3vRuoP8h/FTOHfg4AD84kExOPI+EL9cvoyl2KBl1ZGd5d0uAzoMiPntW10YTHMpvZhwR1RFT+AStKxULfQ=='

  # Terraform settings
  terraformWorkingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'


stages:
- stage: terraformDestroy
  dependsOn:
  jobs:
    - job: plan 
      steps:
       - task: TerraformInstaller@0
         displayName: Install Terraform
         inputs:
          terraformVersion: 'latest' 
       - task: TerraformTaskV4@4
         displayName: Initialize
         condition: succeeded()
         inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(terraformWorkingDirectory)'
          backendServiceArm: '$(bkServiceConnection)'
          backendAzureRmResourceGroupName: '$(bkstrgrg)'
          backendAzureRmStorageAccountName: '$(bkstrgname)'
          backendAzureRmContainerName: '$(bkcontainer)'
          backendAzureRmKey: '$(bkstrgkey)'      
       - task: TerraformTaskV4@4
         displayName: Plan
         inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(terraformWorkingDirectory)'
          environmentServiceNameAzureRM: '$(serviceConnection)'
          commandOptions: '-var resource_group_name=$(azurergname) -var bkstrgrg=$(bkstrgrg) -var bkstrgname=$(bkstrgname) -var bkcontainer=$(bkcontainer) -var bkstrgkey=$(bkstrgkey)'
    - job: manualValidation
      dependsOn: plan
      pool: server
      steps:
       - task: ManualValidation@0
         displayName: Wait for external validation
         inputs:
           notifyUsers: aze@umbraco.dk
           instructions: 'Please validate that the terraform plan is correct'
    - job: destroy
      dependsOn: manualValidation
      steps:
        - task: TerraformTaskV4@4
          displayName: Initialize
          condition: succeeded()
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(terraformWorkingDirectory)'
            backendServiceArm: '$(bkServiceConnection)'
            backendAzureRmResourceGroupName: '$(bkstrgrg)'
            backendAzureRmStorageAccountName: '$(bkstrgname)'
            backendAzureRmContainerName: '$(bkcontainer)'
            backendAzureRmKey: '$(bkstrgkey)'
        - task: TerraformTaskV4@4
          inputs:
            provider: 'azurerm'
            command: 'destroy'
            workingDirectory: '$(terraformWorkingDirectory)'
            environmentServiceNameAzureRM: '$(serviceConnection)'
 