# Repo: andr317c/load-test-pipeline
# File: azure-pipeline.yml

name: load_test_pipeline

trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Azure Service Connection (NEEDS TO BE CHANGED FROM MICROSOFT AZURE SPONSORSHIP TO UMBRACO SERVICES DEV)
  serviceConnection: 'terraform-umbraco-load-testing-az-connection'
  # Azure Resource Variables
  azureprefix: 'az-load-testing-umbraco'
  azurergname: 'andreas-azure-load-testing-rg'
  azurelocation: 'westeurope'
  # Terraform settings
  terraformWorkingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'

  loadTestName: 
  hostNames:

stages:
- stage: terraformDeploy
  jobs:
    - job: setup 
      steps:
       - task: TerraformInstaller@0
         displayName: Install Terraform
         inputs:
          terraformVersion: 'latest' 
       - task: PowerShell@2
         displayName: Terraform Init
         inputs:
           targetType: 'inline'
           script: 'terraform init -backend=false'
           workingDirectory: '$(terraformWorkingDirectory)'
       - task: TerraformTaskV4@4
         displayName: Validate 
         inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(terraformWorkingDirectory)'
       - task: AzureCLI@2
         name: AzLoginInfo
         displayName: Gets Azure Login Credentials 
         inputs:
          azureSubscription: '$(serviceConnection)'
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$servicePrincipalId" 
            
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$servicePrincipalKey"

            echo "##vso[task.setvariable variable=ARM_TENANT_ID]$tenantId"
          addSpnToEnvironment: true
       - task: TerraformTaskV4@4
         displayName: Plan
         condition: succeeded()
         inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(terraformWorkingDirectory)'
          environmentServiceNameAzureRM: '$(serviceConnection)'
          commandOptions: '-parallelism=1 -var resource_name_prefix=$(azureprefix) -var resource_group_name=$(azurergname) -var client_id=$(ARM_CLIENT_ID) -var client_secret=$(ARM_CLIENT_SECRET) -var tenant_id=$(ARM_TENANT_ID)'
    - job: manualValidation
      dependsOn: setup
      pool: server
      steps:
       - task: ManualValidation@0
         displayName: Wait for external validation
         inputs:
           # notifyUsers: aze@umbraco.dk
           instructions: 'Please validate that the terraform plan is correct'
    - job: apply
      dependsOn: 
        - setup
        - manualValidation 
      steps:
      # We need to initialize again, otherwise the pipeline will fail.
      - task: PowerShell@2
        displayName: Terraform Init
        inputs:
          targetType: 'inline'
          script: 'terraform init -backend=false'
          workingDirectory: '$(terraformWorkingDirectory)'
      - task: AzureCLI@2
        name: AzLoginInfo
        displayName: Gets Azure Login Credentials 
        inputs:
         azureSubscription: '$(serviceConnection)'
         scriptType: bash
         scriptLocation: inlineScript
         inlineScript: |
          echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$servicePrincipalId" 
            
          echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$servicePrincipalKey"

          echo "##vso[task.setvariable variable=ARM_TENANT_ID]$tenantId"
         addSpnToEnvironment: true
      - task: TerraformTaskV4@4
        displayName: Apply
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(terraformWorkingDirectory)'
          environmentServiceNameAzureRM: '$(serviceConnection)'
          commandOptions: '-parallelism=1 -var resource_name_prefix=$(azureprefix) -var resource_group_name=$(azurergname) -var client_id=$(ARM_CLIENT_ID) -var client_secret=$(ARM_CLIENT_SECRET) -var tenant_id=$(ARM_TENANT_ID)'
      - task: TerraformTaskV4@4
        displayName: 'Terraform Outputs'
        inputs:
          provider: 'azurerm'
          command: 'output'
          workingDirectory: '$(terraformWorkingDirectory)'
          environmentServiceNameAzureRM: '$(serviceConnection)'
      - task: PowerShell@2
        displayName: Terraform Output get hostNames 
        inputs:
          targetType: 'inline'
          script: 'terraform output -json umbraco_version_hostnames'
          workingDirectory: '$(terraformWorkingDirectory)'
      - task: PowerShell@2
        displayName: Terraform Output get loadTestName 
        inputs:
          targetType: 'inline'
          script: Write-Host "##vso[task.setvariable variable=loadertestName;isOutput=true]$(terraform output -raw load_test_name)"
          workingDirectory: '$(terraformWorkingDirectory)'
      - task: Bash@3
        displayName: Output to Variable
        inputs:
          targetType: 'inline'
          script: echo "@(loadertestName)"
    - job: manualValidationLoadTest
      dependsOn: apply
      pool: server
      steps:
       - task: ManualValidation@0
         displayName: Wait for external validation
         inputs:
           # notifyUsers: aze@umbraco.dk
           instructions: 'Please validate that the terraform has applied as intended'
    # At the moment the load test will only be able to test two host names. If you want to extend it to three or four, just add another task with AzureLoadTest. It should contain the correct hostName 
    - job: runLoadTest
      dependsOn: manualValidationLoadTest

      # Im not really sure how we will be able to run the load test properly. The issue is that we can have as many app servies as we want, and we create the same amount of load tests. But I'm not sure how to update each of the
      # Load test with the correct values aswell as inputting the correct domain name in each of them. 
      #- task: AzureLoadTest@1
      #  inputs:
      #    azureSubscription: '$(serviceConnection)'
      #    loadTestConfigFile: '$(terraformWorkingDirectory)/LoadTestVersions.yaml'
      #    resourceGroup: '$(azurergname)'
      #    loadTestRunName: 'CompareVersions'
      #    loadTestRunDescription: 'We are  load testing different versions of Umbraco'