# Repo: andr317c/load-test-pipeline
# File: azure-pipeline.yml

name: load_test_pipeline

trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Azure Service Connection (NEEDS TO BE CHANGED FROM MICROSOFT AZURE SPONSORSHIP TO UMBRACO SERVICES DEV)
  serviceConnection: 'terraform-umbraco-load-testing-az-connection'
  # Azure Resource Variables
  azureprefix: 'az-load-tester-umbraco'
  azurergname: 'azure-andreas-load-testing-rg'
  # Terraform settings
  terraformWorkingDirectory: '$(System.DefaultWorkingDirectory)/Terraform'
  # LoadTestLocation
  loadTestFileLocation: '$(System.DefaultWorkingDirectory)/LoadTestVersions.yaml'

stages:
- stage: terraformDeploy
  jobs:
    - job: setup 
      displayName: Terraform setup
      steps:
       - task: TerraformInstaller@0
         displayName: Install Terraform
         inputs:
          terraformVersion: 'latest' 
       - task: PowerShell@2
         displayName: Terraform Init
         inputs:
           targetType: 'inline'
           script: 'terraform init -backend=false'
           workingDirectory: '$(terraformWorkingDirectory)'
       - task: TerraformTaskV4@4
         displayName: Validate 
         inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(terraformWorkingDirectory)'
       - task: TerraformTaskV4@4
         displayName: Plan
         condition: succeeded()
         inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(terraformWorkingDirectory)'
          environmentServiceNameAzureRM: '$(serviceConnection)'
          commandOptions: '-parallelism=1 -var resource_name_prefix=$(azureprefix) -var resource_group_name=$(azurergname)'
    - job: manualValidation
      displayName: Manual validation for checking if the terraform plan is correct
      dependsOn: setup
      pool: server
      steps:
       - task: ManualValidation@0
         displayName: Wait for external validation
         inputs:
           # notifyUsers: aze@umbraco.dk
           instructions: 'Please validate that the terraform plan is correct'
    - job: apply
      displayName: Terraform apply
      dependsOn: 
        - setup
        - manualValidation 
      steps:
      # We need to initialize again, otherwise the pipeline will fail.
      - task: PowerShell@2
        displayName: Terraform Init
        inputs:
          targetType: 'inline'
          script: 'terraform init -backend=false'
          workingDirectory: '$(terraformWorkingDirectory)'
      - task: AzureCLI@2
        name: AzLoginInfo
        displayName: Gets Azure Login Credentials 
        inputs:
         azureSubscription: '$(serviceConnection)'
         scriptType: bash
         scriptLocation: inlineScript
         inlineScript: |
          echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$servicePrincipalId" 
            
          echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$servicePrincipalKey"

          echo "##vso[task.setvariable variable=ARM_TENANT_ID]$tenantId"
         addSpnToEnvironment: true
      - task: TerraformTaskV4@4
        displayName: Apply
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(terraformWorkingDirectory)'
          environmentServiceNameAzureRM: '$(serviceConnection)'
          commandOptions: '-parallelism=1 -var resource_name_prefix=$(azureprefix) -var resource_group_name=$(azurergname) -var client_id=$(ARM_CLIENT_ID) -var client_secret=$(ARM_CLIENT_SECRET) -var tenant_id=$(ARM_TENANT_ID)'
      - task: TerraformTaskV4@4
        displayName: 'Terraform Outputs'
        inputs:
          provider: 'azurerm'
          command: 'output'
          workingDirectory: '$(terraformWorkingDirectory)'
          environmentServiceNameAzureRM: '$(serviceConnection)'
      - task: PowerShell@2
        name: outputVars
        displayName: Terraform Output get variables 
        condition: succeededOrFailed()
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "##vso[task.setvariable variable=hostNames;isOutput=true]$(terraform output -json umbraco_version_hostnames)"

            Write-Host "##vso[task.setvariable variable=loadTestName;isOutput=true]$(terraform output -json load_test_name)"
          workingDirectory: '$(terraformWorkingDirectory)'
     # Remove this manual validation step after the load tests have been set up correctly
    - job: manualValidationLoadTest
      displayName: Manual validation for running load tests
      dependsOn: apply
      condition: succeededOrFailed()
      pool: server
      variables:
        loadTestName: $[ dependencies.apply.outputs['outputVars.loadTestName'] ]
        hostNames: $[ dependencies.apply.outputs['outputVars.hostNames'] ]
      steps:
       - task: ManualValidation@0
         name: manuellValidationLoadTest
         displayName: Wait for external validation
         inputs:
           # notifyUsers: aze@umbraco.dk
           instructions: 'Please validate that the terraform has applied as intended before running the load tests on the load test resource $(loadTestName). HostNames = $(hostNames)'
    # At the moment the load test will only be able to test two host names. If you want to extend it to three or four, just add another task with AzureLoadTest. 
    - job: runLoadTest
      displayName: Runs the load test
      dependsOn: manualValidationLoadTest
      condition: eq(dependencies.manuellValidationLoadTest.result, 'succeeded')
      variables: 
        loadTestName: $[ dependencies.apply.outputs['outputVars.loadTestName'] ]
        hostNames: $[ dependencies.apply.outputs['outputVars.hostNames'] ]
      steps:
      - task: AzureLoadTest@1
        displayName: LoadTest
        inputs:
          azureSubscription: '$(serviceConnection)'
          loadTestConfigFile: '$(loadTestFileLocation)'
          resourceGroup: '$(azurergname)'
          loadTestResource: '$(loadTestName)'
          loadTestRunName: 'LoadTesting'
          loadTestRunDescription: 'We are load testing different versions of Umbraco'
          env: |
            [
              {
              "name": "hostName",
              "value": "$(azureprefix)-appservice-v10.azurewebsites.net"
              }
            ]
      - task: AzureLoadTest@1
        displayName: LoadTest
        inputs:
          azureSubscription: '$(serviceConnection)'
          loadTestConfigFile: '$(loadTestFileLocation)'
          resourceGroup: '$(azurergname)'
          loadTestResource: '$(loadTestName)'
          loadTestRunName: 'LoadTesting'
          loadTestRunDescription: 'We are load testing different versions of Umbraco'
          env: |
            [
              {
              "name": "hostName",
              "value": "$(azureprefix)-appservice-v11.azurewebsites.net"
              }
            ]

    - job: doesResourceGroupExists
      displayName: Checks if resource group exists
      dependsOn: runLoadTest
      condition: succeededOrFailed()
      steps:
       - task: AzureCLI@2
         name: checkResourceGroup
         displayName: Checks if the resource group exists
         inputs:
           azureSubscription: '$(serviceConnection)'
           scriptType: 'pscore'
           scriptLocation: 'inlineScript'
           inlineScript: 'Write-Host "##vso[task.setvariable variable=doesExist;isOutput=true]$(az group exists -n $(azurergname))"'
          
    - job: manualValidationResourceGroup
      dependsOn: doesResourceGroupExists
      condition: eq(dependencies.doesResourceGroupExists.outputs['checkResourceGroup.doesExist'], true)
      variables:
        doesResourceGroupExistVar: $[ dependencies.doesResourceGroupExists.outputs['checkResourceGroup.doesExist'] ]
      displayName: Manual validation for deleting the resource group
      pool: server
      steps:
       - task: ManualValidation@0
         displayName: Wait for external validation
         inputs:
           # notifyUsers: aze@umbraco.dk
           instructions: 'Please validate if you want to delete the resource group with the name of $(azurergname). $(doesResourceGroupExistVar) All the content inside of the resource group will also be deleted.'

    - job: deleteResourceGroup
      displayName: Deletes the resource group
      dependsOn: manualValidationResourceGroup
      condition: eq(dependencies.manualValidationResourceGroup.result, 'succeeded')
      steps:
      - task: AzureCLI@2
        name: checkResourceGroup
        displayName: Checks if the resource group exists before deleting it
        inputs:
         azureSubscription: '$(serviceConnection)'
         scriptType: 'pscore'
         scriptLocation: 'inlineScript'
         inlineScript: 'Write-Host "##vso[task.setvariable variable=doesExist;isOutput=true]$(az group exists -n $(azurergname))"'
      - task: AzureCLI@2
        displayName: Deletes the resource group
        retryCountOnTaskFailure: 2
        inputs:
          azureSubscription: '$(serviceConnection)'
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: 'az group delete -n $(azurergname) --yes'